# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_wiringPi', [dirname(__file__)])
        except ImportError:
            import _wiringPi
            return _wiringPi
        if fp is not None:
            try:
                _mod = imp.load_module('_wiringPi', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _wiringPi = swig_import_helper()
    del swig_import_helper
else:
    import _wiringPi
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def digitalWrite(pin, value):
    return _wiringPi.digitalWrite(pin, value)
digitalWrite = _wiringPi.digitalWrite

def wiringPiSetup():
    return _wiringPi.wiringPiSetup()
wiringPiSetup = _wiringPi.wiringPiSetup

def pinMode(pin, mode):
    return _wiringPi.pinMode(pin, mode)
pinMode = _wiringPi.pinMode

def wiringPiFindNode(pin):
    return _wiringPi.wiringPiFindNode(pin)
wiringPiFindNode = _wiringPi.wiringPiFindNode

def wiringPiNewNode(pinBase, numPins):
    return _wiringPi.wiringPiNewNode(pinBase, numPins)
wiringPiNewNode = _wiringPi.wiringPiNewNode

def wiringPiSetupSys():
    return _wiringPi.wiringPiSetupSys()
wiringPiSetupSys = _wiringPi.wiringPiSetupSys

def wiringPiSetupGpio():
    return _wiringPi.wiringPiSetupGpio()
wiringPiSetupGpio = _wiringPi.wiringPiSetupGpio

def wiringPiSetupPhys():
    return _wiringPi.wiringPiSetupPhys()
wiringPiSetupPhys = _wiringPi.wiringPiSetupPhys

def pinModeAlt(pin, mode):
    return _wiringPi.pinModeAlt(pin, mode)
pinModeAlt = _wiringPi.pinModeAlt

def pullUpDnControl(pin, pud):
    return _wiringPi.pullUpDnControl(pin, pud)
pullUpDnControl = _wiringPi.pullUpDnControl

def digitalRead(pin):
    return _wiringPi.digitalRead(pin)
digitalRead = _wiringPi.digitalRead

def pwmWrite(pin, value):
    return _wiringPi.pwmWrite(pin, value)
pwmWrite = _wiringPi.pwmWrite

def analogRead(pin):
    return _wiringPi.analogRead(pin)
analogRead = _wiringPi.analogRead

def analogWrite(pin, value):
    return _wiringPi.analogWrite(pin, value)
analogWrite = _wiringPi.analogWrite

def wiringPiSetupPiFace():
    return _wiringPi.wiringPiSetupPiFace()
wiringPiSetupPiFace = _wiringPi.wiringPiSetupPiFace

def wiringPiSetupPiFaceForGpioProg():
    return _wiringPi.wiringPiSetupPiFaceForGpioProg()
wiringPiSetupPiFaceForGpioProg = _wiringPi.wiringPiSetupPiFaceForGpioProg

def waitForInterrupt(pin, mS):
    return _wiringPi.waitForInterrupt(pin, mS)
waitForInterrupt = _wiringPi.waitForInterrupt

def wiringPiISR(pin, mode, function):
    return _wiringPi.wiringPiISR(pin, mode, function)
wiringPiISR = _wiringPi.wiringPiISR

def piThreadCreate(fn):
    return _wiringPi.piThreadCreate(fn)
piThreadCreate = _wiringPi.piThreadCreate

def piLock(key):
    return _wiringPi.piLock(key)
piLock = _wiringPi.piLock

def piUnlock(key):
    return _wiringPi.piUnlock(key)
piUnlock = _wiringPi.piUnlock

def piHiPri(pri):
    return _wiringPi.piHiPri(pri)
piHiPri = _wiringPi.piHiPri

def delay(howLong):
    return _wiringPi.delay(howLong)
delay = _wiringPi.delay

def delayMicroseconds(howLong):
    return _wiringPi.delayMicroseconds(howLong)
delayMicroseconds = _wiringPi.delayMicroseconds

def millis():
    return _wiringPi.millis()
millis = _wiringPi.millis

def micros():
    return _wiringPi.micros()
micros = _wiringPi.micros
# This file is compatible with both classic and new-style classes.


